import logging
import re
from ollama_prompt import chat_prompt
from ollama_engine import get_llm_engine
from langchain_core.output_parsers import StrOutputParser
from langchain_core.messages import HumanMessage, AIMessage


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


# –ö–ª–∞—Å—Å —á–∞—Ç-–±–æ—Ç–∞
class ChatBot:
    """
    –ö–ª–∞—Å—Å ChatBot —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å LLM-–º–æ–¥–µ–ª—å—é.
    –û–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö.
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞. –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        """
        self.chat_history = [
            {"role": "assistant", "content": "Hi! I'm **DeepSeek**. How can I help you code today? üíª"}
        ]

    def generate_ai_response(self, user_input, llm_engine):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏, –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è (<think>...</think>).

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            user_input (str): –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            llm_engine (ChatOllama): –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è LLM-–º–æ–¥–µ–ª—å.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            tuple: (—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏, –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç).
        """
        logging.info(f"üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–æ–¥–µ–ª—å: {user_input}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ HumanMessage
        self.chat_history.append(HumanMessage(content=user_input))

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –≤—ã–∑–æ–≤–∞ LangChain: –ø—Ä–æ–º–ø—Ç ‚Üí –º–æ–¥–µ–ª—å ‚Üí –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç—Ä–æ–∫
        chain = chat_prompt | llm_engine | StrOutputParser()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        response = chain.invoke(
            {"input": user_input, "chat_history": self.chat_history}) or "‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç."

        # –†–∞–∑–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏, –≤—ã–¥–µ–ª—è—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è <think>...</think>
        thoughts_match = re.search(r"<think>(.*?)</think>", response, re.DOTALL)
        if thoughts_match:
            thoughts = thoughts_match.group(1).strip()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É <think> –∏ </think>
            main_response = response.replace(thoughts_match.group(0),
                                             "").strip()  # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        else:
            thoughts = None  # –ï—Å–ª–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º None
            main_response = response.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

        logging.info(f"üí° –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è:\n{thoughts if thoughts else '–ù–µ—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π'}")
        logging.info(f"üí° –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç:\n{main_response}")

        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        if thoughts:
            self.chat_history.append(AIMessage(content=f"ü§î **Model's Thoughts:**\n> {thoughts}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        self.chat_history.append(AIMessage(content=main_response))

        return thoughts, main_response  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç

    # –ß–∞—Ç –≤ Gradio
    def chat(self, message, model_choice, temperature, top_p, top_k, repeat_penalty, history):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ LLM-–º–æ–¥–µ–ª—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            message (str): –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            model_choice (str): –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å.
            temperature (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.
            top_p (float): –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (nucleus sampling).
            top_k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤.
            repeat_penalty (float): –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤.
            history (list): –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            tuple: ("", –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞)
        """
        if not message:
            return "", history

        # –ü–æ–ª—É—á–∞–µ–º LLM —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        llm_engine = get_llm_engine(model_choice, temperature, top_p, top_k, repeat_penalty)

        history.append({"role": "user", "content": message})

        thoughts, ai_response = self.generate_ai_response(message, llm_engine)

        if thoughts:
            history.append({"role": "assistant", "content": f"ü§î **Model's Thoughts:**\n> {thoughts}"})

        history.append({"role": "assistant", "content": ai_response})

        logging.info(f"üìú –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:\n{history}")

        return "", history

    # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ (–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–¥–µ–ª–∏)
    def chat_test(self, message, model_choice, history):
        """
        –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–¥–µ–ª–∏ LLM.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            message (str): –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            model_choice (str): –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏).
            history (list): –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user"/"assistant", "content": "—Ç–µ–∫—Å—Ç"}].

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            tuple: ("", –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞) ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—á–∏—â–∞–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤ Gradio.
        """
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        history.append({"role": "user", "content": message})

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        history.append({"role": "assistant", "content": "This is a test response."})

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ –≤ Gradio) –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        return "", history
